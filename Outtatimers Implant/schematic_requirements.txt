# Requirements for ATTINY10 Schematic Generator with KiCad Official IPC API
# This script now uses KiCad's official IPC API with nng protocol and protobuf messages

## 🔧 Required Dependencies

### For Full KiCad IPC API Integration:
- **KiCad 6.x or 7.x** installed on your system
- **KiCad API enabled** in Preferences → KiCad API (checkbox enabled)
- **Python 3.6+** (standard system Python)
- **pynng library** for nng protocol communication: `pip install pynng`

### IPC API Protocol Details (from official KiCad docs):
- **Transport**: nng (nanomsg next generation) protocol
- **Message Format**: Protocol Buffers (protobufs)
- **Mode**: Request-reply only (no asynchronous notifications)
- **Socket**: `/tmp/kicad/api.sock` (Linux/macOS)

## 🚀 Installation & Usage

### Prerequisites:
1. **Install KiCad** (6.x or 7.x)
2. **Enable KiCad API**:
   - Open KiCad
   - Go to **Preferences** → **KiCad API**
   - Check **"Enable KiCad API"**
   - Note the socket path: `/tmp/kicad/api.sock`
3. **Install pynng**: `pip install pynng`
4. **Keep KiCad running** (can be minimized)

### Run the Script:
```bash
cd "Outtatimers Implant"
python3 generate_schematic.py
```

## 📁 Output Files

### When KiCad IPC API is Available:
- **attiny10_schematic.kicad_sch** - Real KiCad schematic file
- Can be opened directly in KiCad
- Ready for PCB design

### When KiCad IPC API is Not Available:
- **attiny10_schematic.txt** - Text-based circuit description
- Use as blueprint for manual KiCad creation

## ✅ Features

- **Official KiCad API**: Uses documented IPC API patterns
- **nng Protocol**: Reliable inter-process communication
- **Protobuf Messages**: Structured message format
- **Request-Reply Mode**: Synchronous operation
- **Real KiCad Files**: Creates actual .kicad_sch files
- **Automatic Fallback**: Generates text schematic if IPC fails

## 🔍 Troubleshooting

### pynng Library Issues:
- **Install pynng**: `pip install pynng`
- **Check Python version**: Requires Python 3.6+
- **Verify installation**: `python3 -c "import pynng; print('pynng available')"`

### KiCad IPC API Issues:
- **Enable KiCad API** in Preferences
- **Check socket path**: `/tmp/kicad/api.sock`
- **Verify KiCad version** (6.x or 7.x required)
- **Restart KiCad** if socket connection issues persist

### Protobuf Message Issues:
- **Current implementation**: Simplified message structure
- **Full implementation**: Requires KiCad protobuf definitions
- **Message types**: Based on official API patterns

## 💡 IPC API Architecture (from KiCad docs)

```
┌─────────────────┐
│ KiCad Internals │
└───────▲─────────┘
        │
┌───────┴─────────┐
│ REQUEST_HANDLER │
└───────▲─────────┘
        │
 ┌──────┴────────┐
 │ API_HANDLER_* │
 └───────▲────────┘
        │
  ┌─────┴──────┐
  │ API_SERVER │
  └─────▲──────┘
        │
    ┌───┴───┐
    │ KINNG │
    └───▲───┘
        │
     ┌──┴──┐
     │ nng │
     └──▲──┘
        │
 ┌──────┴──────┐
 │ UNIX socket │
 └─────────────┘
```

## 🚨 Important Notes

- **Current Implementation**: Simplified protobuf message structure
- **Full API**: Requires KiCad protobuf definitions and handler registration
- **Message Types**: Based on documented API patterns (CreateDocument, AddObject, etc.)
- **Fallback**: Always generates text schematic for reliability

---

*This script now follows KiCad's official IPC API documentation for proper integration!*
